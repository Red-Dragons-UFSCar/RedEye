// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_UI.proto
// Protobuf C++ Version: 5.27.2

#include "ssl_UI.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr SSL_UI_ball::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_UI_ball::SSL_UI_ball(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SSL_UI_ballDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_UI_ballDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_UI_ballDefaultTypeInternal() {}
  union {
    SSL_UI_ball _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_UI_ballDefaultTypeInternal _SSL_UI_ball_default_instance_;

inline constexpr SSL_UI_Robot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_id_{0u},
        x_{0},
        y_{0},
        current_{0},
        connection_status_{false},
        signal_quality_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_UI_Robot::SSL_UI_Robot(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SSL_UI_RobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_UI_RobotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_UI_RobotDefaultTypeInternal() {}
  union {
    SSL_UI_Robot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_UI_RobotDefaultTypeInternal _SSL_UI_Robot_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ssl_5fUI_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ssl_5fUI_2eproto = nullptr;
const ::uint32_t
    TableStruct_ssl_5fUI_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::SSL_UI_ball, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_ball, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_UI_ball, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_ball, _impl_.y_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_.robot_id_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_.current_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_.connection_status_),
        PROTOBUF_FIELD_OFFSET(::SSL_UI_Robot, _impl_.signal_quality_),
        0,
        1,
        2,
        3,
        4,
        5,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::SSL_UI_ball)},
        {12, 26, -1, sizeof(::SSL_UI_Robot)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_SSL_UI_ball_default_instance_._instance,
    &::_SSL_UI_Robot_default_instance_._instance,
};
const char descriptor_table_protodef_ssl_5fUI_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014ssl_UI.proto\"#\n\013SSL_UI_ball\022\t\n\001x\030\001 \002(\002"
    "\022\t\n\001y\030\002 \002(\002\"z\n\014SSL_UI_Robot\022\020\n\010robot_id\030"
    "\001 \002(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\017\n\007current\030\004"
    " \002(\002\022\031\n\021connection_status\030\005 \002(\010\022\026\n\016signa"
    "l_quality\030\006 \002(\002"
};
static ::absl::once_flag descriptor_table_ssl_5fUI_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ssl_5fUI_2eproto = {
    false,
    false,
    175,
    descriptor_table_protodef_ssl_5fUI_2eproto,
    "ssl_UI.proto",
    &descriptor_table_ssl_5fUI_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_ssl_5fUI_2eproto::offsets,
    file_level_enum_descriptors_ssl_5fUI_2eproto,
    file_level_service_descriptors_ssl_5fUI_2eproto,
};
// ===================================================================

class SSL_UI_ball::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_UI_ball>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SSL_UI_ball::SSL_UI_ball(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_UI_ball)
}
SSL_UI_ball::SSL_UI_ball(
    ::google::protobuf::Arena* arena, const SSL_UI_ball& from)
    : SSL_UI_ball(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_UI_ball::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_UI_ball::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
SSL_UI_ball::~SSL_UI_ball() {
  // @@protoc_insertion_point(destructor:SSL_UI_ball)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_UI_ball::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SSL_UI_ball::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              SSL_UI_ball::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_._cached_size_),
              false,
          },
          &SSL_UI_ball::MergeImpl,
          &SSL_UI_ball::kDescriptorMethods,
          &descriptor_table_ssl_5fUI_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SSL_UI_ball::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SSL_UI_ball_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_UI_ball>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_.y_)}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_UI_ball::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_UI_ball)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SSL_UI_ball::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_UI_ball)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_UI_ball)
  return target;
}

::size_t SSL_UI_ball::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_UI_ball)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SSL_UI_ball::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_UI_ball*>(&to_msg);
  auto& from = static_cast<const SSL_UI_ball&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_UI_ball)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_UI_ball::CopyFrom(const SSL_UI_ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_UI_ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_UI_ball::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_UI_ball&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_UI_ball::InternalSwap(SSL_UI_ball* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_.y_)
      + sizeof(SSL_UI_ball::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(SSL_UI_ball, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata SSL_UI_ball::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_UI_Robot::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_UI_Robot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

SSL_UI_Robot::SSL_UI_Robot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_UI_Robot)
}
SSL_UI_Robot::SSL_UI_Robot(
    ::google::protobuf::Arena* arena, const SSL_UI_Robot& from)
    : SSL_UI_Robot(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_UI_Robot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_UI_Robot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_id_),
           0,
           offsetof(Impl_, signal_quality_) -
               offsetof(Impl_, robot_id_) +
               sizeof(Impl_::signal_quality_));
}
SSL_UI_Robot::~SSL_UI_Robot() {
  // @@protoc_insertion_point(destructor:SSL_UI_Robot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_UI_Robot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SSL_UI_Robot::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              SSL_UI_Robot::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_._cached_size_),
              false,
          },
          &SSL_UI_Robot::MergeImpl,
          &SSL_UI_Robot::kDescriptorMethods,
          &descriptor_table_ssl_5fUI_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> SSL_UI_Robot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SSL_UI_Robot_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_UI_Robot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint32 robot_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_UI_Robot, _impl_.robot_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.robot_id_)}},
    // required float x = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.x_)}},
    // required float y = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.y_)}},
    // required float current = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.current_)}},
    // required bool connection_status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SSL_UI_Robot, _impl_.connection_status_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.connection_status_)}},
    // required float signal_quality = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.signal_quality_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint32 robot_id = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.robot_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required float x = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.x_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.y_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float current = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.current_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required bool connection_status = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.connection_status_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // required float signal_quality = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.signal_quality_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_UI_Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_UI_Robot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.robot_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.signal_quality_) -
        reinterpret_cast<char*>(&_impl_.robot_id_)) + sizeof(_impl_.signal_quality_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SSL_UI_Robot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_UI_Robot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_robot_id(), target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_y(), target);
  }

  // required float current = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_current(), target);
  }

  // required bool connection_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_connection_status(), target);
  }

  // required float signal_quality = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_signal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_UI_Robot)
  return target;
}

::size_t SSL_UI_Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_UI_Robot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // required uint32 robot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_robot_id());
    }

    // required float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // required float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // required float current = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // required bool connection_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // required float signal_quality = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SSL_UI_Robot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_UI_Robot*>(&to_msg);
  auto& from = static_cast<const SSL_UI_Robot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_UI_Robot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.robot_id_ = from._impl_.robot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.current_ = from._impl_.current_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.connection_status_ = from._impl_.connection_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.signal_quality_ = from._impl_.signal_quality_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_UI_Robot::CopyFrom(const SSL_UI_Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_UI_Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_UI_Robot::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_UI_Robot&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_UI_Robot::InternalSwap(SSL_UI_Robot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.signal_quality_)
      + sizeof(SSL_UI_Robot::_impl_.signal_quality_)
      - PROTOBUF_FIELD_OFFSET(SSL_UI_Robot, _impl_.robot_id_)>(
          reinterpret_cast<char*>(&_impl_.robot_id_),
          reinterpret_cast<char*>(&other->_impl_.robot_id_));
}

::google::protobuf::Metadata SSL_UI_Robot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ssl_5fUI_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
