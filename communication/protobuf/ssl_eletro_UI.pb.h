// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_eletro_UI.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5feletro_5fUI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5feletro_5fUI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5feletro_5fUI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5feletro_5fUI_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5feletro_5fUI_2eproto;
class SSL_eletronica;
struct SSL_eletronicaDefaultTypeInternal;
extern SSL_eletronicaDefaultTypeInternal _SSL_eletronica_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSL_eletronica* Arena::CreateMaybeMessage<::SSL_eletronica>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SSL_eletronica final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_eletronica) */ {
 public:
  inline SSL_eletronica() : SSL_eletronica(nullptr) {}
  ~SSL_eletronica() override;
  explicit PROTOBUF_CONSTEXPR SSL_eletronica(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_eletronica(const SSL_eletronica& from);
  SSL_eletronica(SSL_eletronica&& from) noexcept
    : SSL_eletronica() {
    *this = ::std::move(from);
  }

  inline SSL_eletronica& operator=(const SSL_eletronica& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_eletronica& operator=(SSL_eletronica&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_eletronica& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_eletronica* internal_default_instance() {
    return reinterpret_cast<const SSL_eletronica*>(
               &_SSL_eletronica_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSL_eletronica& a, SSL_eletronica& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_eletronica* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_eletronica* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_eletronica* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_eletronica>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_eletronica& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_eletronica& from) {
    SSL_eletronica::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_eletronica* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_eletronica";
  }
  protected:
  explicit SSL_eletronica(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kCurrentFieldNumber = 2,
    kPingFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTransmissionFieldNumber = 5,
  };
  // optional uint32 robot_id = 1;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  uint32_t robot_id() const;
  void set_robot_id(uint32_t value);
  private:
  uint32_t _internal_robot_id() const;
  void _internal_set_robot_id(uint32_t value);
  public:

  // optional float current = 2;
  bool has_current() const;
  private:
  bool _internal_has_current() const;
  public:
  void clear_current();
  float current() const;
  void set_current(float value);
  private:
  float _internal_current() const;
  void _internal_set_current(float value);
  public:

  // optional uint32 ping = 3;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  uint32_t ping() const;
  void set_ping(uint32_t value);
  private:
  uint32_t _internal_ping() const;
  void _internal_set_ping(uint32_t value);
  public:

  // optional bool status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // optional float transmission = 5;
  bool has_transmission() const;
  private:
  bool _internal_has_transmission() const;
  public:
  void clear_transmission();
  float transmission() const;
  void set_transmission(float value);
  private:
  float _internal_transmission() const;
  void _internal_set_transmission(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_eletronica)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t robot_id_;
    float current_;
    uint32_t ping_;
    bool status_;
    float transmission_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5feletro_5fUI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSL_eletronica

// optional uint32 robot_id = 1;
inline bool SSL_eletronica::_internal_has_robot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_eletronica::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void SSL_eletronica::clear_robot_id() {
  _impl_.robot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SSL_eletronica::_internal_robot_id() const {
  return _impl_.robot_id_;
}
inline uint32_t SSL_eletronica::robot_id() const {
  // @@protoc_insertion_point(field_get:SSL_eletronica.robot_id)
  return _internal_robot_id();
}
inline void SSL_eletronica::_internal_set_robot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.robot_id_ = value;
}
inline void SSL_eletronica::set_robot_id(uint32_t value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:SSL_eletronica.robot_id)
}

// optional float current = 2;
inline bool SSL_eletronica::_internal_has_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_eletronica::has_current() const {
  return _internal_has_current();
}
inline void SSL_eletronica::clear_current() {
  _impl_.current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SSL_eletronica::_internal_current() const {
  return _impl_.current_;
}
inline float SSL_eletronica::current() const {
  // @@protoc_insertion_point(field_get:SSL_eletronica.current)
  return _internal_current();
}
inline void SSL_eletronica::_internal_set_current(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_ = value;
}
inline void SSL_eletronica::set_current(float value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:SSL_eletronica.current)
}

// optional uint32 ping = 3;
inline bool SSL_eletronica::_internal_has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_eletronica::has_ping() const {
  return _internal_has_ping();
}
inline void SSL_eletronica::clear_ping() {
  _impl_.ping_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SSL_eletronica::_internal_ping() const {
  return _impl_.ping_;
}
inline uint32_t SSL_eletronica::ping() const {
  // @@protoc_insertion_point(field_get:SSL_eletronica.ping)
  return _internal_ping();
}
inline void SSL_eletronica::_internal_set_ping(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ping_ = value;
}
inline void SSL_eletronica::set_ping(uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:SSL_eletronica.ping)
}

// optional bool status = 4;
inline bool SSL_eletronica::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_eletronica::has_status() const {
  return _internal_has_status();
}
inline void SSL_eletronica::clear_status() {
  _impl_.status_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool SSL_eletronica::_internal_status() const {
  return _impl_.status_;
}
inline bool SSL_eletronica::status() const {
  // @@protoc_insertion_point(field_get:SSL_eletronica.status)
  return _internal_status();
}
inline void SSL_eletronica::_internal_set_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.status_ = value;
}
inline void SSL_eletronica::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SSL_eletronica.status)
}

// optional float transmission = 5;
inline bool SSL_eletronica::_internal_has_transmission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_eletronica::has_transmission() const {
  return _internal_has_transmission();
}
inline void SSL_eletronica::clear_transmission() {
  _impl_.transmission_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_eletronica::_internal_transmission() const {
  return _impl_.transmission_;
}
inline float SSL_eletronica::transmission() const {
  // @@protoc_insertion_point(field_get:SSL_eletronica.transmission)
  return _internal_transmission();
}
inline void SSL_eletronica::_internal_set_transmission(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.transmission_ = value;
}
inline void SSL_eletronica::set_transmission(float value) {
  _internal_set_transmission(value);
  // @@protoc_insertion_point(field_set:SSL_eletronica.transmission)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5feletro_5fUI_2eproto
